@model YummyTummy.Models.Restaurant
@using YummyTummy.Util



<h2>Reviews for @Model.Name</h2>

<p>
    @Html.ActionLink("Create New ", "Create", new { restId = Model.RestaurantId })
    |
    @Html.ActionLink(" Back to Restaurants", "Index", "Restaurants")
</p>
<hr />

<!-- This row element will contain the drop-down list for ordering of restaurants,
     as well as the search bar.-->
<div class="filter-row row">
    <!-- Search Bar -->
    <div id="right">
        @using (Html.BeginForm("Index", "Restaurants", FormMethod.Post))
        {
            <div class="input-group stylish-input-group">
                <input class="form-control pull-right" type="search" id="search"
                       name="search" placeholder="Search by any field..." />
                <span id="search-button-area" class="input-group-addon">
                    <button id="search-button" type="submit" value="search">
                        <!-- This bug took me two hours to figure out... using i instead
                        of span works as the HTML tag -->
                        <i class="glyphicon glyphicon-search" aria-hidden="true"></i>
                    </button>
                </span>
            </div>
        }
    </div>

    <!-- After many hours, the EnumHelper class creates a select list out of an enum type,
    which will implicitly retrieve the display name attribute value.
    https://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Mvc/Html/EnumHelper.cs -->

    @Html.DropDownList("orderResult",
                            EnumHelper.GetSelectList(typeof(ReviewOrderEnum)),
                            "Order Reviews By",
                            new
                            {
                                @class = "form-control dropdown",
                                style = "margin-top:-3%; margin-bottom:2%; margin-left:1.5%",
                                @onchange = "onOrderingSelected(this)"
                            })

</div>

<table class="table">
    <tr>
        <th>
            @Html.DisplayName("Reviewer Name")
        </th>

        <th>
            @Html.DisplayName("Rating")
        </th>
        <th>
            @Html.DisplayName("Comment")
        </th>
        <th>
            @Html.DisplayName("Date Rated")
        </th>
        <th></th>
    </tr>

    @{
        IEnumerable<YummyTummy.Models.RestaurantReview> reviews = (IOrderedEnumerable<YummyTummy.Models.RestaurantReview>) ViewData["Reviews"];
        if (reviews == null)
        {
            reviews = Model.Review;
        }
        foreach (var item in reviews)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ReviewerName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Rating)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Comment)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateRated)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }

    }

</table>
<script>
// Need to get the DOM obj and its options array, whcih
// we can access the text option from that list, to pass
// to the action.
function onOrderingSelected(obj)
{
    var text = obj.options[obj.selectedIndex].text;
    window.location.href = "/RestaurantReviews/OrderBy?orderResult=" + text + "&restId=" + @Model.RestaurantId;
}
</script>